@page "/weather"
@using WeatherApp.Models;
@using WeatherApp.Utilities;
@using System.Globalization
@inject HttpClient Client;

<h3>Weather App</h3>

<p>Primera rama</p>

<p>Segunda rama</p>

<div class="input-group mb-3 mt-3">
    <input class="form-control" type="text" @bind=city placeholder="City name"/>
    <div>
        <button class="btn btn-outline-secondary" @onclick=GetWeather>Search</button>
    </div>
</div>

@if (weatherData != null)
{
    <div class="text-center">
        <p class="display-5">@city</p>
        <p class="display-1">@weatherData.current.temperature_2m ºC</p>
        <p class="display-6">@WeatherCode.Convert(weatherData.daily.weathercode[0])</p>
    </div>

    <div class="card-group">
        @for (int i = 0; i < weatherData.daily.time.Length; i++)
        {
            <WeatherApp.Componentes.WeatherCards Day="@weatherData.daily.time[i]" 
                                                 min="@weatherData.daily.temperature_2m_min[i]" 
                                                 max="@weatherData.daily.temperature_2m_max[i]"
                                                 Descripcion="@WeatherCode.Convert(weatherData.daily.weathercode[i])">
            </WeatherApp.Componentes.WeatherCards>
        }
    </div>

}

@code {
    string city = "";
    float lat;
    float lon;

    WeatherModel? weatherData;

    async Task GetWeather()
    {
        var cityData = await GetCityData();

        lat = cityData.results[0].lat;
        lon = cityData.results[0].lon;

        CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-US");
        weatherData = await Client.GetFromJsonAsync<WeatherModel>(EndPoints.GetWeayherEndPoint(lat, lon));
        CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("es-es");
    }

    async Task<CityData> GetCityData()
    {
        var cityData = await Client.GetFromJsonAsync<CityData>(EndPoints.GetGeoAplifyEndPoint(city));
        return cityData;
    }
}
